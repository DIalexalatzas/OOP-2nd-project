Ονοματεπώνυμο: ΑΛΕΞΑΝΔΡΟΣ ΑΛΑΤΖΑΣ
Α.Μ.: sdi1900005

Εντολή μεταγλώττισης: g++ -std=c++11 main.cpp

Για την εκτέλεση δίνονται οι παράμετροι από τη γραμμή εντολής σύμφωνα με την εκφώνηση.
Σημειώνεται η Cclass να μην είναι μεγαλύτερη από 32, διότι οι άνθρωποι της άσκησης παίρνουν
τα ονόματά τους από ένα αρχείο 600 μοναδικών ονομάτων. Επίσης με βάση την εκφώνηση έγινε η
υπόθεση πως οι σταθερές κατά τις οποίες μεταβάλλεται η κούραση είναι θετικοί ακέραιοι.

Το παραδοτέο μου αποτελείται από 3 αρχεία txt(README, names, out). Το names περιέχει 600
μοναδικά ονόματα τα οποία βρήκα στο διαδίκτυο και χρησιμοποιώ στην main για τη δημιουργία
των ανθρώπων. Επίσης το out υπάρχει μόνο για εκτύπωση των αποτελεσμάτων της εκτέλεσης.
Υπάρχει ένα αρχείο επικεφαλίδας askisi3.h το οποίο διαθέτει τους ορισμούς των κλάσεων και
των μεθόδων τους. Γίνονται #include οι <iostream> και <string> για εκτυπώσεις και χρήση
strings αντίστοιχα. Τέλος, υπάρχουν 2 αρχεία πηγαίου κώδικα askisi3.cpp και main.cpp.
Στο πρώτο βρίσκονται όλες οι υλοποιήσεις των κλάσεων και των μεθόδων τους ενώ στο δεύτερο
η υλοποίηση της main καθώς και μιας βοηθητικής συνάρτησης swap.

Πιο συγκεκριμένα:

Σχετικά με τις σχεδιαστικές μου επιλογές σε askisi3.h και askisi3.cpp:


Η ιδέα που ακολουθώ είναι να φτιάξω μία υπερκλάση που διαθέτει τα μέγιστα πιθανά κοινά
σημεία μεταξύ των υποκλάσεών της. Έτσι, φτιάχνω μία κλάση Person, η οποία έχει τα κοινά
χαρακτηριστικά μαθητών και δασκάλων name, floorNo, classNo, inClass(μία ένδειξη αν βρίσκεται
σε τάξη ή όχι), fatigue(η κούραση).
Στη συνέχεια, ορίζω τον constructor και τον destructor, accessors, μία συνάρτηση set_inClass
η οποία θέτει την τιμή της bool inClass σε true και τέλος την print. Όλες οι συναρτήσεις θέλω
να είναι virtual ώστε να κληρονομηθούν από τις υποκλάσεις. Μάλιστα, ορίζω την print ως pure
καθώς είναι η μόνη που θα πρέπει να υλοποιείται διαφορετικά για δάσκαλο και διαφορετικα για μαθητή
αλλά και επειδή θέλω να γίνει η Person αφηρημένη και μου αρκεί μία pure για να το πετύχω.

Για ΔΑΣΚΑΛΟ, κληρωνομεί το public μέρος της Person και έχει άμεση πρόσβαση και στα στοιχεία του
protected μέρους. Συνεπώς τον αρχικοποιώ καλώντας τον constructor του Person. Διαθέτει όλες τις 
μεθόδους ενός Person και υλοποιώ κατάλληλα την print σύμφωνα με την εκφώνηση. Επιπλέον διαθέτει
μία συνάρτηση teach η οποία υπολογίζει την τελική του κούραση για Ν ώρες διδασκαλείας. Για να υπολογιστεί
η κούραση διαθέτει μία static μεταβλητή που θα αναπαριστά τη σταθερά Lt. Την ορίζω static διοτί θα είναι
κοινή για όλα τα αντικείμενα Teacher και την αρχικοποιώ με τιμή 0 καθώς πρέπει να έχει αρχικοποιηθεί πριν
την εκτέλεση του προγράμματος. Αργότερα στην main της ανατίθεται η τιμή από τη γραμμή εντολών.

Για ΜΑΘΗΤΗ, κληρονομεί το public μέρος της Person και αρχικοποιείται κατά τον ίδιο τρόπο με τον
δάσκαλο, καλώντας τον constructor του Person. Αντιστοίχως, υλοποιώ την συνάρτηση print σύμφωνα με
την εκφώνηση επειδή όμως το κάθε είδος μαθητή διαθέτει άλλη σταθερά κούρασης, ορίζω την attend ως pure
και επιτυγχάνω παράλληλα και την μετατροπή της Student σε αφηρημένη κλάση.

Για JUNIOR/SENIOR, κληρονομούν το public του Student και αρχικοποιούνται καλώντας τον constructor του.
Εδώ εκτυπώνονται και τα αντίστοιχα μηνύματα της εκφώνησης για δημιουργία/καταστροφή. Διαθέτουν αντιστοίχως
static σταθερές κούρασης κατά τον ίδιο τρόπο με τον δάσκαλο και οι attend υπολογίζουν την τελική κούραση του
κάθε αντικειμένου.

Η ίδια λογική ακολουθείται και για τη δημιουργία χώρων. Υπάρχει μία υπερκλάση που αναπαριστά την έννοια
του χώρου. Αυτη διαθέτει έναν constructor, destructor και το κοινό χαρακτηριστικό όλων των χώρων το οποίο
είναι η enter. Ορίζεται ως pure για να γίνει η Space αφηρημένη και για να ορίσει η κάθε υποκλάση τη δική
της υλοποίηση.

Στη συνέχεια γίνεται διάκριση των χώρων σε Operating και Non_operating. Στην ουσία, operating είναι οι χώροι
School, Floor, Classroom οι οποίοι είναι αυτοί που "λειτουργούν" (διαθέτουν operate), δέχονται μόνο είσοδο
μαθητών αλλά και τοποθέτηση δασκάλων. Από την άλλη, οι Non_operating δηλαδή οι Yard, Stairs, Corridor
διαθέτουν enter και exit, καθώς και έναν πίνακα δεικτών σε Student μίας θέσης. Αυτοί οι χώροι δηλαδή
λειτουργούν για την μετακίνηση ενός μαθητή από μέρος σε μέρος και κατα τη λειτουργία του σχολείου δεν έχουν
κάποιο ενεργό ρόλο.

Σύμφωνα με τα παραπάνω:

Οι OPERATING διαθέτουν protected την Cclass ώστε να δημιοργηθούν κατάλληλα οι τάξεις. Επίσης διαθέτουν τις μεθόδους
που προαναφέρθηκαν enter, place, operate, print οι οποίες έχουν διαφορετικές υλοποιήσεις για κάθε χώρο άρα
θα οριστούν ως pure virtual.

Οι NON_OPERATING θα διαθέτουν τον πίνακα για τον μαθητή, τον destructor ως pure virtual γιατί οι enter και exit 
μπορούν να οριστούν με κοινό τρόπο για όλους τους χώρους τέτοιου είδους. Συγκεκριμένα, η enter απλώς αναθέτει
τον student στη πρώτη και μοναδική θέση του πίνακα, ενώ η exit αναθέτει σε αυτή τη θέση την τιμή null, και επιστρέφει
τον student.

Με βάση αυτόν τον σχεδιασμό, οι κλάσεις YARD, STAIRS, CORRIDOR έχουν έναν constructor που καλεί τον constructor
της Non_operating που με τη σειρά του καλεί αυτόν του Space. Διαθέτουν τις συναρτήσεις enter και exit οι οποίες
εκτυπώνουν το κατάλληλο μήνυμα και καλούν την αντίστοιχη συνάρτηση της Non_operating.

Η CLASSROOM διαθέτει τα στοιχεία της με βάση την εκφώνηση, έναν ακέραιο counter που μετρά το πλήθος των μαθητών,
έναν δείκτη σε Teacher καθώς και τον πίνακα δεικτών μαθητών. Αρχικοποιείται καλώντας τους αντίστοιχους constructors
των υπερκλάσεών της, δημιουργεί τον πίνακα, αρχικοποιεί τον δείκτη σε null και διαθέτει δύο accessors για τα στοιχεία της.
Για την enter, βάζει τον μαθητή στη θέση του και αυξάνει τον μετρητή κατά ένα, καλεί την set_inClass για τον μαθητή και
εκτυπώνει τα κατάλληλα μηνύματα. Για την place αναθέτει τον teacher στον δείκτη της Classroom και καλεί την set_inClass για
τον δάσκαλο. Η operate καλεί την teach για τον δάσκαλο και την attend για κάθε έναν μαθητή με παράμετρο Ν ώρες. Η print 
κάνει τις κατάλληλες εκτυπώσεις σύμφωνα με την εκφώνηση.

Η FLOOR διαθέτει τον αριθμό του ορόφου, έναν δείκτη σε Corridor και έναν πίνακα δεικτών 6 θέσεων από Classroom.
Αρχικοποιείται και κατά τη κλήση του constructor του δημιουργεί έναν νέο διάδρομο καθώς και 6 νέες τάξεις.
Για την enter, καλεί την enter του διαδρόμου και έπειτα κάνει τον κατάλληλο έλεγχο ώστε ο μαθητής να μπεί στην τάξη
που του αντιστοιχεί. Στην enter της τάξης θα δοθεί ως παράμετρος ο Student που επιστρέφει η κλήση της exit για τον
διάδρομο. Για την place αφού ελεγχθεί ότι ο δάσκαλος θα τοποθετηθεί στη σωστή τάξη, καλείται η place για την τάξη του.
Η operate καλεί για κάθε τάξη την αντίστοιχη operate για Ν ώρες. Η print εκτυπώνει με βάση την εκφώνηση.

Η SCHOOL διαθέτει έναν δείκτη σε Yard, έναν σε Stairs και έναν πίνακα δεικτών 3 θέσεων από Floor. Αρχικοποιείται
και δημιουργεί μια νέα αυλή, σκάλες και 3 νέους ορόφους. Για την enter καλεί την enter της αυλής και έπειτα της σκάλας,
η οποία παίρνει ως παράμετρο τον student που επιστρέφει η exit της αυλης. Κάνει τους κατάλληλους ελέγχους ώστε να μπεί
ο μαθητής στον σωστό όροφο και τον εισάγει εκεί που πρέπει. Αντιστοίχως, η place κάνει τους ελέγχους για τον δάσκαλο και
τον τοποθετεί στον όροφό του. Η operate καλεί για κάθε όροφο την operate για Ν ώρες. Η print εκτυπώνει με βάση την εκφώνηση.


Σχετικά με την main:
Αρχικά κάνω #include iostream για τις εκτυπώσεις, fstream για την ανάγνωση του αρχείου μου, string για τη χρήση string, ctime
για να βάλω seed στη rand, stdlib για να διαθέτω την rand και το askisi3.cpp για τις υλοποιήσεις μου. Επίσης ορίζω μία συνάρτηση
swap για δείκτη σε Person ώστε να ανακατέψω στη συνέχεια τους πίνακες μαθητών και δασκάλων μου. Στην main, μέσω της atoi αναθέτω τις τιμές από την γραμμή
εντολών στις στατικές μεταβλητές της κάθε κλάσης αντίστοιχα. Ορίζω μεταβλητές που θα με βοηθήσουν στη συνέχεια (περιγράφονται
στα σχόλια) και βάζω φύτρα στην rand. Δημιουργώ ένα νέο σχολείο. Φτιάχνω ένα πίνακα 600 μοναδικών ονομάτων από το names.txt. Αφού κάνω
τον έλεγχο ότι άνοιξε το αρχείο, το διαβάζω γραμμή προς γραμμή και αναθέτω το όνομα σε μία θέση του πίνακα. Επειδή στο τέλος του string 
υπάρχει αλλαγή γραμμής, την αντικαθιστώ με ένα κενό ώστε να μην μου επηρεάζει τις εκτυπώσεις. Κλείνω το αρχείο μου. Έπειτα δημιουργώ τους
δασκάλους οι οποίοι τετριμμένα είναι 18. Ένας νέος δάσκαλος δημιουργείται με τα στοιχεία του και την ένδειξη false αφού είναι εκτός τάξης.
Στη συνέχεια δημιουργώ τους μαθητές. Ένας νέος μαθητής δημιουργείται με τα στοιχεία του, κάνοντας τη
διάκριση σε Junior για τις πρώτες 3 τάξεις και Senior για τις 3 επόμενες. Επίσης τα ονόματα δίνονται από το 18ο και έπειτα 
καθώς τα πρώτα 18 δόθηκαν στους δασκάλους.
Κατόπιν αφού έχω τους πίνακες των μαθητών και δασκάλων μου, τους ανακατεύω κατα τυχαίο τρόπο ορίζοντας δύο τυχαίους ακεραίους και εναλλάσοντας
τις θέσεις των μαθητών/δασκάλων με βάση αυτούς. Από τη στιγμή που οι πίνακες είναι πλέον ανακατεμένοι, εν συνεχεία για όσο υπάρχουν μαθητές,
εισάγεται ένας μαθητής και τοποθετείται ένας δάσκαλος (αν υπάρχει διαθέσιμος). Εδώ να σημειωθεί πως προκειμένου να φανεί και η τυχαιότητα στους
δασκάλους έχω προσθέσει εκτυπώσεις στην place κάτι το οποίο δεν ζητείται, αλλά θεώρησα ότι βοηθάει. Έπειτα καλείται η operate του σχολείου για Ν
ώρες και τελικά εκτυπώνεται το σχολικό κτήριο. Στο τέλος αποδεσμεύεται όση μνήμη είχε δεσμευτεί δυναμικά κατά τη διάρκεια της διαδικασίας και
καταστρέφονται οι δάσκαλοι, οι μαθητές και το σχολείο.